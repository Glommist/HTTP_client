{
    "Last-Modified": "Thu, 15 Dec 2022 12:06:14 GMT",
    "ETag": "\"b9e-5efdcadf6f1be\"",
    "Date": "Sun, 13 Apr 2025 03:34:48 GMT",
    "Body": "\n/**\n * jQuery Once Plugin v1.2\n * http://plugins.jquery.com/project/once\n *\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n */\n\n(function ($) {\n  var cache = {}, uuid = 0;\n\n  /**\n   * Filters elements by whether they have not yet been processed.\n   *\n   * @param id\n   *   (Optional) If this is a string, then it will be used as the CSS class\n   *   name that is applied to the elements for determining whether it has\n   *   already been processed. The elements will get a class in the form of\n   *   \"id-processed\".\n   *\n   *   If the id parameter is a function, it will be passed off to the fn\n   *   parameter and the id will become a unique identifier, represented as a\n   *   number.\n   *\n   *   When the id is neither a string or a function, it becomes a unique\n   *   identifier, depicted as a number. The element's class will then be\n   *   represented in the form of \"jquery-once-#-processed\".\n   *\n   *   Take note that the id must be valid for usage as an element's class name.\n   * @param fn\n   *   (Optional) If given, this function will be called for each element that\n   *   has not yet been processed. The function's return value follows the same\n   *   logic as $.each(). Returning true will continue to the next matched\n   *   element in the set, while returning false will entirely break the\n   *   iteration.\n   */\n  $.fn.once = function (id, fn) {\n    if (typeof id != 'string') {\n      // Generate a numeric ID if the id passed can't be used as a CSS class.\n      if (!(id in cache)) {\n        cache[id] = ++uuid;\n      }\n      // When the fn parameter is not passed, we interpret it from the id.\n      if (!fn) {\n        fn = id;\n      }\n      id = 'jquery-once-' + cache[id];\n    }\n    // Remove elements from the set that have already been processed.\n    var name = id + '-processed';\n    var elements = this.not('.' + name).addClass(name);\n\n    return $.isFunction(fn) ? elements.each(fn) : elements;\n  };\n\n  /**\n   * Filters elements that have been processed once already.\n   *\n   * @param id\n   *   A required string representing the name of the class which should be used\n   *   when filtering the elements. This only filters elements that have already\n   *   been processed by the once function. The id should be the same id that\n   *   was originally passed to the once() function.\n   * @param fn\n   *   (Optional) If given, this function will be called for each element that\n   *   has not yet been processed. The function's return value follows the same\n   *   logic as $.each(). Returning true will continue to the next matched\n   *   element in the set, while returning false will entirely break the\n   *   iteration.\n   */\n  $.fn.removeOnce = function (id, fn) {\n    var name = id + '-processed';\n    var elements = this.filter('.' + name).removeClass(name);\n\n    return $.isFunction(fn) ? elements.each(fn) : elements;\n  };\n})(jQuery);\n"
}